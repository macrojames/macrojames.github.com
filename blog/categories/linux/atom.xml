<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | MJ Blog]]></title>
  <link href="http://macrojames.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://macrojames.github.com/"/>
  <updated>2012-06-13T13:48:01+02:00</updated>
  <id>http://macrojames.github.com/</id>
  <author>
    <name><![CDATA[Macrojames]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making SSH available in environments with http(s)-proxies]]></title>
    <link href="http://macrojames.github.com/blog/2012/06/13/making-ssh-available-in-environments-with-http-s-proxies/"/>
    <updated>2012-06-13T13:34:00+02:00</updated>
    <id>http://macrojames.github.com/blog/2012/06/13/making-ssh-available-in-environments-with-http-s-proxies</id>
    <content type="html"><![CDATA[<p>If you are in networks with internet access only through proxies, you should try tunneling SSH through SSL. <a href="http://www.stunnel.org">Stunnel</a> is made for this purpose.</p>

<p>So let us install Stunnel4:</p>

<pre><code>sudo apt-get install stunnel
mkdir -p /var/run/stunnel4
sudo chown stunnel4:stunnel4 /var/run/stunnel4
vi /etc/stunnel/stunnel.conf
</code></pre>

<h2>Configuring the server</h2>

<p>Change its config to:</p>

<pre><code>; Some security enhancements for UNIX systems - comment them out on Win32
chroot = /var/lib/stunnel4/
setuid = stunnel4
setgid = stunnel4
; PID is created inside the chroot jail
pid = /stunnel4.pid

client=no
cert=/etc/stunnel/stunnel.pem
debug=3
sslVersion = all
output=/var/log/stunnel4/stunnel.log
[sslssh]
accept=192.168.2.42:10443
connect=localhost:22
</code></pre>

<p>Do not forget to change the IP address in the "accept=" line</p>

<p>This allows connecting to port 10443 with SSL and redirects traffic from and to port 22 (SSH). You could also enter any other host and port as target which is reachable from the stunnel host.
I assume you are able to configure the port forwarding in your router yourself</p>

<p>Create the certificate and convert it for use with stunnel:</p>

<pre><code>openssl req -new -x509 -keyout st-key.pem -out st-csr.pem -days 1000 -nodes
sudo "echo | cat st-csr.pem - st-key.pem &gt; /etc/stunnel/stunnel.pem"
</code></pre>

<h2>Configuring the client</h2>

<pre><code>; Some security enhancements for UNIX systems - comment them out on Win32
chroot = /var/lib/stunnel4/
setuid = stunnel4
setgid = stunnel4
; PID is created inside the chroot jail
pid = /stunnel4.pid

client=yes
cert=/etc/stunnel/stunnel.pem
debug=3
sslVersion = all
output=/var/log/stunnel4/stunnel.log
[ssh]
accept = localhost:10443
connect = PROXY_IP:80
protocol = connect
protocolHost = REMOTE_IP:443
</code></pre>

<p>You have to enter the correct IP addresses again. I suggest using no-ip.com or any other DynDNS provider if REMOTE_IP ist dynamic.</p>

<h2>Starting the services</h2>

<p>If everything is configured, use</p>

<pre><code>sudo /etc/init.d/stunnel4 start
</code></pre>

<p>After successful configuration you are able to connect to the remote SSH machine with</p>

<pre><code>ssh localhost:10443
</code></pre>

<h2>Having trouble?</h2>

<p>If the connection fails it is possible, that your firewall or proxy blocks SSL-requests without User-Agent Header set.
I am using proxytunnel on the client side to circumvent this "feature":</p>

<pre><code>sudo apt-get install proxytunnel
</code></pre>

<p>Change your ~/.ssh/config</p>

<pre><code>Host REMOTE_NAME 
        ProxyCommand proxytunnel -q -e -p PROXY_IP:80 -d REMOTE_IP:10443 -H "User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0.1) Gecko/20100101 Firefox/10.0.1\n"
        ProtocolKeepAlives 30
        User pi
</code></pre>

<p>To connect the remote system:</p>

<pre><code>ssh REMOTE_NAME
</code></pre>

<p>Simple? :)</p>
]]></content>
  </entry>
  
</feed>
